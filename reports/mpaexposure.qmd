---
title: "MPA Exposure Analysis"
format: 
  html:
    code-fold: true
editor: visual
---

```{r}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

------------------------------------------------------------------------

Code to characterize exposure of California MPAs to future pH, DO, and temperature using IPSL model predictions. Note: this setup is only for one projection (IPSL). Change every occurence of "IPSL" to "GFDL" or "HADLEY" in this report to do same for diff projection.

## Setup

Load libraries and read data. Convert DO units and filter for years 2090-2100.

```{r}
#| label: libraries
#| message: false

library(tidyverse)
library(lubridate)
library(data.table)
library(factoextra)
library(broom)
library(cowplot)
library(respR)
library(here)
library(lattice)
library(RcppRoll)
library(RColorBrewer)
library(gplots)
library(ggpmisc)
```

Load MPA name file and merge with model projection. Add time periods.

```{r}
#| label: load_data
#| message: false

#Read mpa data, convert DO units, add a column for time period, and one for difference between mid/end cen and historic.
mpa <- read_csv(here("data/processeddata/model/IPSLmpa.csv")) %>% 
  mutate(DO_mmolL = DO_surf/1000,
         DO_mgL = convert_DO(DO_mmolL, from = "mmol/L", to = "mg/L")) %>% 
  filter(Year <= 2020|
         Year >= 2040 & Year <= 2060|
         Year >= 2080 & Year <= 2100) %>%
  mutate(period = case_when((Year <= 2020) ~ "historic", 
                           (Year %in% c(2040:2060)) ~ "midcen",
                           (Year %in% c(2080:2100)) ~ "endcen")) %>%
  select(-T_bot, -DO_bot, -pH_bot,-DO_surf,-DO_mmolL) %>%
  rename(Temp = T_surf,
         DO = DO_mgL,
         pH = pH_surf) %>%
  mutate(Date = make_date(Year, Month, Day)) %>%
  mutate(julianday = yday(Date))

mpa$File <- substr(mpa$File, 1, nchar(mpa$File)-4)

```

Add regions

```{r}
#| label: regions
#| message: false
#add regions here!
mpa_centroids<- read_csv(here("data/rawdata/MPA_polygons.csv")) %>%
  select(-Area_sq_mi, -Type)
mpa_centroids$File <- sub("^", "tphdo_mpa_", mpa_centroids$OBJECTID )

mpa_centroids <- mpa_centroids %>%
  mutate(region = ifelse(degy >= 37.29, "norca", 
                         ifelse(degy > 34.8, "centralca", 
                                ifelse("degy" < 34.274 & "degx" < -119.220, "channelisl" , 
                                       "socal"))))

channel <- c("Anacapa Island FMCA", "Anacapa Island FMR", "Anacapa Island SMCA", "Anacapa Island SMR", "Anacapa Island Special Closure", 
             "Arrow Point to Lion Head Point SMCA", "Begg Rock SMR", "Blue Cavern Offshore SMCA", "Blue Cavern Onshore SMCA (No-Take)", 
             "Carrington Point SMR", "Casino Point SMCA (No-Take)", "Cat Harbor SMCA", "Farnsworth Offshore SMCA", "Farnsworth Onshore SMCA", 
             "Footprint FMR", "Footprint SMR", "Gull Island FMR", "Gull Island SMR", "Harris Point FMR", "Harris Point SMR", "Judith Rock SMR", 
             "Long Point SMR", "Loverâ€™s Cove SMCA", "Painted Cave SMCA", "Richardson Rock FMR", "Richardson Rock SMR", "San Miguel Island Special Closure", 
             "Santa Barbara Island FMR", "Santa Barbara Island SMR", "Scorpion FMR", "Scorpion SMR", "Skunk Point SMR", "South Point FMR", "South Point SMR")

mpa_centroids$region[mpa_centroids$NAME %in% channel]  <- "channel" 
mpa <- merge(mpa, mpa_centroids,  by = "File")

```

## Calculate climatology

Create a climatology (Jan averaged over every year), so each MPA has one value per month that is averaged over all of the years. Find SD of this dataframe, to get seasonal variation.

```{r}
#| label: clim_SD
#| message: false

#calculate climatology for each MPA for each time period
mpa_climatology <- mpa %>%
  group_by(File, Month, period) %>%
    summarise(T_clim = mean(Temp), 
              pH_clim = mean(pH), 
              DO_clim =   mean(DO))

#calculate seasonal SD 
seasonal_SD <- mpa_climatology %>%
  group_by(File, period) %>%
  summarise(T_seasonalSD = sd(T_clim),
            pH_seasonalSD = sd(pH_clim),
            DO_seasonalSD = sd(DO_clim))

#individual files per time period 
mpa_historic_climatology <- mpa %>% 
  filter(period == "historic") %>%
  group_by(File, Month) %>%
  summarise(T_clim = mean(Temp), T_clim_sd = sd(Temp), pH_clim = mean(pH), DO_clim =   mean(DO))

mpa_midcen_climatology <- mpa %>%
  filter(period == "midcen") %>%
  group_by(File, Month) %>%
  summarise(T_clim = mean(Temp), pH_clim = mean(pH), DO_clim = mean(DO))

mpa_endcen_climatology <- mpa %>%
  filter(period == "endcen") %>%
  group_by(File, Month) %>%
  summarise(T_clim = mean(Temp), pH_clim = mean(pH), DO_clim = mean(DO))

```

## Calculate event-based variation

Create a mock dataset interpolating climatologies to get daily values in the absence of natural event-based variability. Subtract actual daily values. Find standard deviation of these differences (on a daily scale).

Setup for interpolation:

```{r}
#| label: inter_setup
#| message: false
#| warning: false

#First: Need to create a day1 and day365 proxies. Approx function can only interpolate not extrapolate so without this, you can interpolate days 1-14 and 350-365. #below creates empty vectors as big as we need (365 days per mpa) for each variable and each mpa. julianday is dates 1-365 as many mpa times

mpaslist = unique(mpa$File) 
mpas = rep(NA, 365*121)
julianday = rep(1:365, 121)
T_clim = rep(NA, 365*121)
pH_clim = rep(NA, 365*121)
DO_clim = rep(NA, 365*121)

#Set up a vector of julian day assignment for the 15th of each month and the first and last day of the year
x_in <- yday(as.Date(c("2000-01-01", "2000-01-15","2000-02-15","2000-03-15","2000-04-15","2000-05-15","2000-06-15",
                       "2000-07-15","2000-08-15","2000-09-15","2000-10-15","2000-11-15","2000-12-15", "2000-12-31")))

# creating a list of all the days of the year not included in x_in to interpolate to.
x_out <- (1:365)
x_out <- x_out[!(x_out %in% x_in)] #removing the days of the year we already have values for
```

Interpolation for temp

```{r,warning=FALSE, message=FALSE, results='hide'}
#| label: inter_temp
#| message: false
#| warning: false

mpa_historic_climatology <- mpa_climatology %>%
  filter(period == "historic")

#HISTORIC
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_historic_climatology %>% filter(File == mpaslist[i]) %>% select(T_clim)
  #use a weighted average to get these
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  # a list of y-values of the climatological temp on each of the days in x_in
  y_in <- c(Jan1, d$T_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i] #rep(mpaslist[1], 365)
  T_clim[((i-1)*365+1):(i*365)] <- mod$y
}

historic_tempdata = data.frame(mpas, julianday,T_clim)
historic_tempdata <- historic_tempdata %>%
  rename(File = mpas) %>%
  mutate(period = "historic") %>%
  rename(interp_temp = T_clim)

#Later we create a julian day variable in our OG mpa dataset, to merge this to all the rows on the dataset by filename and day and then have the mean daily climatological value for each row. 


#MIDCEN
mpa_midcen_climatology <- mpa_climatology %>%
  filter(period == "midcen")

for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_midcen_climatology %>% filter(File == mpaslist[i]) %>% select(T_clim)
  #use a weighted average to get these
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  # a list of y-values of the climatological temp on each of the days in x_in
  y_in <- c(Jan1, d$T_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i] #rep(mpaslist[1], 365)
  T_clim[((i-1)*365+1):(i*365)] <- mod$y
}

midcen_tempdata = data.frame(mpas, julianday,T_clim)
midcen_tempdata <- midcen_tempdata %>%
  rename(File = mpas) %>%
  mutate(period = "midcen") %>%
  rename(interp_temp = T_clim)


#ENDCEN
mpa_endcen_climatology <- mpa_climatology %>%
  filter(period == "endcen")

for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_endcen_climatology %>% filter(File == mpaslist[i]) %>% select(T_clim)
  #use a weighted average to get these
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  # a list of y-values of the climatological temp on each of the days in x_in
  y_in <- c(Jan1, d$T_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i] #rep(mpaslist[1], 365)
  T_clim[((i-1)*365+1):(i*365)] <- mod$y
}

endcen_tempdata = data.frame(mpas, julianday,T_clim)
endcen_tempdata <- endcen_tempdata %>%
  rename(File = mpas) %>%
  mutate(period = "endcen") %>%
  rename(interp_temp = T_clim)
  
```

Interpolation for pH

```{r, warning=FALSE, message=FALSE, results='hide'}
#| label: inter_pH
#| message: false
#| warning: false

#HISTORIC
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_historic_climatology %>% filter(File == mpaslist[i]) %>% select(pH_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))

  y_in <- c(Jan1, d$pH_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  pH_clim[((i-1)*365+1):(i*365)] <- mod$y
}

historic_pHdata = data.frame(mpas, julianday,pH_clim)
historic_pHdata <- historic_pHdata %>%
  rename(File = mpas) %>%
  mutate(period = "historic") %>%
  rename(interp_pH = pH_clim)

#MIDCEN
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_midcen_climatology %>% filter(File == mpaslist[i]) %>% select(pH_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))

  y_in <- c(Jan1, d$pH_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  pH_clim[((i-1)*365+1):(i*365)] <- mod$y
}

midcen_pHdata = data.frame(mpas, julianday,pH_clim)
midcen_pHdata <- midcen_pHdata %>%
  rename(File = mpas) %>%
  mutate(period = "midcen") %>%
  rename(interp_pH = pH_clim)

#ENDCEN
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_endcen_climatology %>% filter(File == mpaslist[i]) %>% select(pH_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))

  y_in <- c(Jan1, d$pH_clim, Dec31)

  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  pH_clim[((i-1)*365+1):(i*365)] <- mod$y
}

endcen_pHdata = data.frame(mpas, julianday,pH_clim)
endcen_pHdata <- endcen_pHdata %>%
  rename(File = mpas) %>%
  mutate(period = "endcen") %>%
  rename(interp_pH = pH_clim)


```

Interpolation for DO:

```{r,warning=FALSE, message=FALSE, results='hide'}
#| label: inter_DO
#| message: false
#| warning: false

#HISTORIC
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_historic_climatology %>% filter(File == mpaslist[i]) %>% select(DO_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  y_in <- c(Jan1, d$DO_clim, Dec31)
  
  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  DO_clim[((i-1)*365+1):(i*365)] <- mod$y
}

historic_DOdata = data.frame(mpas, julianday,DO_clim)
historic_DOdata <- historic_DOdata %>%
  rename(File = mpas) %>%
  mutate(period = "historic") %>%
  rename(interp_DO = DO_clim)

#MIDCEN
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_midcen_climatology %>% filter(File == mpaslist[i]) %>% select(DO_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  y_in <- c(Jan1, d$DO_clim, Dec31)
  
  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  DO_clim[((i-1)*365+1):(i*365)] <- mod$y
}

midcen_DOdata = data.frame(mpas, julianday,DO_clim)
midcen_DOdata <- midcen_DOdata %>%
  rename(File = mpas) %>%
  mutate(period = "midcen")  %>%
  rename(interp_DO = DO_clim)

#ENDCEN
for (i in 1:length(mpaslist)){
  print(i)
  d = mpa_endcen_climatology %>% filter(File == mpaslist[i]) %>% select(DO_clim)
  Dec31 = as.numeric(( ((16/30) * (d[12,2])) + ((14/30) * d[1,2]) ))
  Jan1 = as.numeric(( ((14/30) * (d[12,2])) + ((16/30) * d[1,2]) ))
  y_in <- c(Jan1, d$DO_clim, Dec31)
  
  mod = approx(x = x_in, y = y_in, xout = x_out) 
  mpas[((i-1)*365+1):(i*365)] <- mpaslist[i]
  DO_clim[((i-1)*365+1):(i*365)] <- mod$y
}

endcen_DOdata = data.frame(mpas, julianday,DO_clim)
endcen_DOdata <- endcen_DOdata %>%
  rename(File = mpas) %>%
  mutate(period = "endcen")  %>%
  rename(interp_DO = DO_clim)
```

## Create summary stats

Merge interpolated values to MPA dataset to find seasonal SD (SD of deviation between daily value and interpolated climatological value). Add other summary stats like event SD, mean, lower 10, upper 10 percentile.

```{r}
#| label: summary_stats

#merging interpolated datasets from prev chunks
interpolated_temp <- rbind(historic_tempdata,midcen_tempdata,endcen_tempdata)
interpolated_pH <- rbind(historic_pHdata, midcen_pHdata, endcen_pHdata)
interpolated_DO <- rbind(historic_DOdata, midcen_DOdata, endcen_DOdata)

sum <- mpa %>%
 
  #merge interpolated climatologies to mpa. (used to calculate event sd)
  merge(interpolated_temp, by = c("File", "julianday", "period")) %>%
  merge(interpolated_pH, by = c("File", "julianday", "period")) %>%
  merge(interpolated_DO, by = c("File", "julianday", "period")) %>%
  
  #subtract actual values - interpolated climatology values 
  #filtered for only upwelling months!!
  mutate(temp_deviation = Temp - interp_temp,
         pH_deviation = pH - interp_pH,
         DO_deviation = DO - interp_DO) %>%
  filter(Month == c(5,6,7,8,9)) %>%
  
  #find event based SD 
  group_by(File, period) %>%
    mutate(T_eventSD = sd(temp_deviation),
            pH_eventSD = sd(pH_deviation),
            DO_eventSD = sd(DO_deviation)) %>%
    select(-interp_temp, -interp_pH, -interp_DO, -temp_deviation,
         -pH_deviation, -DO_deviation) %>%
  
    #merge seasonal SD calculated earlier from climatologies
    merge(seasonal_SD, by = c("File", "period")) %>%
  
    #adding other summary stats - mean, low 10th and upper 10th percentiles
    group_by(File, period) %>%
    mutate(across(c(Temp, DO, pH), 
                   list(mean = mean, 
                        low10 = ~ quantile(.x, 0.1),
                        high10 = ~quantile(.x,0.9)))) %>%
  
  # to get to scale of one row per mpa
  select(-...1, -Temp, -pH, -DO, -julianday, -Year, -Date, -Month, -Day) %>%
  distinct() %>% ungroup()

```

## PCA

PCA with all summary stats (mean, lower 10th percentile, seasonal SD, event SD)

```{r}
#| label: pca

make_pca <- function(df, periodt){
  sum_period <- df %>% filter(period == periodt) 
  sumsub <- sum_period %>% select(-OBJECTID,-NAME, -File, -SHORTNAME, -degx, 
                                  -degy, -region, -period)
  
  pca <- prcomp(sumsub, scale = TRUE)
  
  fviz_pca_biplot(pca, repel = TRUE,
                  col.var = "black",
                  col.ind = sum_period$region,
                  label ="var",
                  labelsize = 3,
                  addEllipses = TRUE,
                  title = periodt) 
  
  fviz_pca_ind(pca, label="none", habillage=sum_period$region,
     addEllipses=TRUE,  col.ind = sum_period$region)
}

make_pca(sum, "historic")
make_pca(sum, "midcen")
make_pca(sum, "endcen") #need to rotate by changing sumsub to sumsub[,-1] inside prcomp

```

## Heatmaps by variable

```{r}

col <- colorRampPalette(brewer.pal(9,"YlOrRd"))(256)
invert_col <- colorRampPalette(rev(brewer.pal(9,"YlOrRd")))(256)

make_heatmap <- function(df, sumstat, color_palette = invert_col){
  
  #make matrix for variable of interest
  matrix <- df %>%
  select(sumstat, NAME, degy, period) %>%
  pivot_wider(names_from = period, values_from = sumstat) %>%
  arrange(-degy) %>%
  select(-degy) 
 
  matrix_numeric <- matrix %>%
  select(-NAME) %>%
  select(historic, midcen, endcen) %>%
  as.matrix()

  row.names(matrix_numeric) <- matrix$NAME

  heatmap.2(matrix_numeric, Rowv = FALSE, Colv = FALSE, dendrogram = "none", 
          main = sumstat, tracecol=NA, revC= TRUE,
          margins = c(5,10), col= color_palette, srtCol = 45, labRow = matrix$NAME)
}

#Temp heatmaps
make_heatmap(sum, "Temp_mean", col)
make_heatmap(sum, "Temp_high10", col)
make_heatmap(sum, "Temp_low10", col)
make_heatmap(sum, "T_eventSD", col)
make_heatmap(sum, "T_seasonalSD", col)

#pH heatmaps
make_heatmap(sum, "pH_mean")
make_heatmap(sum, "pH_high10")
make_heatmap(sum, "pH_low10")
make_heatmap(sum, "pH_eventSD")
make_heatmap(sum, "pH_seasonalSD")

#DO heatmaps
make_heatmap(sum, "DO_mean")
make_heatmap(sum, "DO_high10")
make_heatmap(sum, "DO_low10")
make_heatmap(sum, "DO_eventSD")
make_heatmap(sum, "DO_seasonalSD")

```

## Regressions

Supplementing heatmaps by looking at correlation between historic and future time periods for a given summary stat

```{r}

make_regression <- function(df, sumstat, period1, period2){
 plot_matrix <- df %>%
   filter(period == period1 | period == period2) %>%
   select(sumstat, period, NAME, File) %>%
   pivot_wider(names_from = period, values_from = sumstat) 
 
 ggplot(data = plot_matrix, aes_string(x = period1, y = period2)) +
   stat_poly_line() +
   stat_poly_eq(use_label(c("eq", "R2"))) +
   geom_point() +
   theme_classic() +
   ggtitle(sumstat)
}

#temp
make_regression(sum, "Temp_mean", "historic", "midcen")
make_regression(sum, "Temp_mean", "historic", "endcen")
make_regression(sum, "T_seasonalSD", "historic", "midcen")
make_regression(sum, "T_seasonalSD", "historic", "endcen")
make_regression(sum, "T_eventSD", "historic", "midcen")
make_regression(sum, "T_eventSD", "historic", "endcen")

#pH
make_regression(sum, "pH_mean", "historic", "midcen")
make_regression(sum, "pH_mean", "historic", "endcen")
make_regression(sum, "pH_seasonalSD", "historic", "midcen")
make_regression(sum, "pH_seasonalSD", "historic", "endcen")
make_regression(sum, "pH_eventSD", "historic", "midcen")
make_regression(sum, "pH_eventSD", "historic", "endcen")

#DO
make_regression(sum, "DO_mean", "historic", "midcen")
make_regression(sum, "DO_mean", "historic", "endcen")
make_regression(sum, "DO_seasonalSD", "historic", "midcen")
make_regression(sum, "DO_seasonalSD", "historic", "endcen")
make_regression(sum, "DO_eventSD", "historic", "midcen")
make_regression(sum, "DO_eventSD", "historic", "endcen")

```

## Anomalous pH/DO Event Analysis

Find percentage of unsaturated/ low DO days over all years using a biological threshold. Separated by upwelling and non-upwelling months. Output is used to make maps in QGIS.

```{r}
# Create labels for events (e.g., consecutive days with low pH or low DO) using run 
# length encoding

label_events <- function(is_event) {
  event_rle <- rle(is_event)
  labels <- ifelse(event_rle$values, cumsum(event_rle$values), NA)
  rep(labels, event_rle$lengths)
}

#historic =================================================================================

historic_pH_events <- mpa_historic %>% 
  mutate(is_pH_low = pH < 7.75,
         pH_event = label_events(is_pH_low)) 

historic_pH_event_summary <- historic_pH_events %>% 
  drop_na(pH_event) %>% 
  group_by(File, pH_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_pH = mean(pH),
            intensity = 7.75 - mean_pH,
            severity = intensity*duration_days,
            .groups = "drop")

historic_pH_mpa_summary <- historic_pH_event_summary %>%
  group_by(File) %>%
  summarise(num_event = n(),
         mean_event_duration = mean(duration_days),
         max_event_duration = max(duration_days),
         mean_event_mean_pH = mean(mean_pH),
         mean_event_intensity = mean(intensity),
         mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")

#total days below threshold + avg ph below threhsold per mpa

historic_pH_mpa_summary2 <- historic_pH_events %>%
  filter(is_pH_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(annual_days_belowthresh = n(),
            annual_avg_ph_belowthresh = mean(pH))
historic_pH_mpa_summary3 <- historic_pH_mpa_summary2 %>%
  group_by(File)%>%
  summarise(meanannual_days_belowthresh = mean(annual_days_belowthresh),
            meanannual_avg_pH_belowthresh = mean(annual_avg_ph_belowthresh)) %>% 
  mutate(period = "historic") %>%
  merge(historic_pH_mpa_summary, by = "File") 

#midcen =====================================================================================

midcen_pH_events <- mpa_midcen %>% 
  mutate(is_pH_low = pH < 7.75,
         pH_event = label_events(is_pH_low)) 
midcen_pH_event_summary <- midcen_pH_events %>% 
  drop_na(pH_event) %>% 
  group_by(File, pH_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_pH = mean(pH),
            intensity = 7.75 - mean_pH,
            severity = intensity*duration_days,
            .groups = "drop")
midcen_pH_mpa_summary <- midcen_pH_event_summary %>%
  group_by(File) %>%
  summarise(num_event = n(),
            mean_event_duration = mean(duration_days),
            max_event_duration = max(duration_days),
            mean_event_mean_pH = mean(mean_pH),
            mean_event_intensity = mean(intensity),
            mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg ph below threhsold per mpa
midcen_pH_mpa_summary2 <- midcen_pH_events %>%
  filter(is_pH_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(annual_days_belowthresh = n(),
            annual_avg_ph_belowthresh = mean(pH))
midcen_pH_mpa_summary3 <- midcen_pH_mpa_summary2 %>%
  group_by(File)%>%
  summarise(meanannual_days_belowthresh = mean(annual_days_belowthresh),
            meanannual_avg_pH_belowthresh = mean(annual_avg_ph_belowthresh)) %>% 
  mutate(period = "midcen") %>%
  merge(midcen_pH_mpa_summary, by = "File")  

#endcen =====================================================================================

endcen_pH_events <- mpa_endcen %>% 
  mutate(is_pH_low = pH < 7.75,
         pH_event = label_events(is_pH_low)) 
endcen_pH_event_summary <- endcen_pH_events %>% 
  drop_na(pH_event) %>% 
  group_by(File, pH_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_pH = mean(pH),
            intensity = 7.75 - mean_pH,
            severity = intensity*duration_days,
            .groups = "drop")
endcen_pH_mpa_summary <- endcen_pH_event_summary %>%
  group_by(File) %>%
  summarise(num_event = n(),
            mean_event_duration = mean(duration_days),
            max_event_duration = max(duration_days),
            mean_event_mean_pH = mean(mean_pH),
            mean_event_intensity = mean(intensity),
            mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg ph below threhsold per mpa
endcen_pH_mpa_summary2 <- endcen_pH_events %>%
  filter(is_pH_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(annual_days_belowthresh = n(),
            annual_avg_ph_belowthresh = mean(pH))
endcen_pH_mpa_summary3 <- endcen_pH_mpa_summary2 %>%
  group_by(File)%>%
  summarise(meanannual_days_belowthresh = mean(annual_days_belowthresh),
            meanannual_avg_pH_belowthresh = mean(annual_avg_ph_belowthresh)) %>% 
  mutate(period = "endcen") %>%
  merge(endcen_pH_mpa_summary, by = "File")   


#merging pH event hist/midcen/endcen
pH_event <- full_join(historic_pH_mpa_summary3, midcen_pH_mpa_summary3) %>%
  full_join(endcen_pH_mpa_summary3)
```

```{r}
historic_DO_events <- mpa_historic %>% 
  mutate(is_DO_low = DO < 4.6,
         DO_event = label_events(is_DO_low)) 
historic_DO_event_summary <- historic_DO_events %>% 
  drop_na(DO_event) %>% 
  group_by(File, DO_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_DO = mean(DO),
            intensity = 4.6 - mean_DO,
            severity = intensity*duration_days,
            .groups = "drop")
historic_DO_mpa_summary <- historic_DO_event_summary %>%
  group_by(File) %>%
  summarise(histDO_num_event = n(),
            histDO_mean_event_duration = mean(duration_days),
            histDO_max_event_duration = max(duration_days),
            histDO_mean_event_mean_DO = mean(mean_DO),
            histDO_mean_event_intensity = mean(intensity),
            histDO_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg DO below threhsold per mpa
historic_DO_mpa_summary2 <- historic_DO_events %>%
  filter(is_DO_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(histDO_annual_days_belowthresh = n(),
            histDO_annual_avg_DO_belowthresh = mean(DO))
historic_DO_mpa_summary3 <- historic_DO_mpa_summary2 %>%
  group_by(File)%>%
  summarise(histDO_meanannual_days_belowthresh = mean(histDO_annual_days_belowthresh),
            histDO_meanannual_avg_DO_belowthresh = mean(histDO_annual_avg_DO_belowthresh)) %>%
  merge(historic_DO_mpa_summary, by = "File") 

#midcen =====================================================================================

midcen_DO_events <- mpa_midcen %>% 
  mutate(is_DO_low = DO < 4.6,
         DO_event = label_events(is_DO_low)) 
midcen_DO_event_summary <- midcen_DO_events %>% 
  drop_na(DO_event) %>% 
  group_by(File, DO_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_DO = mean(DO),
            intensity = 4.6 - mean_DO,
            severity = intensity*duration_days,
            .groups = "drop")
midcen_DO_mpa_summary <- midcen_DO_event_summary %>%
  group_by(File) %>%
  summarise(midcenDO_num_event = n(),
            midcenDO_mean_event_duration = mean(duration_days),
            midcenDO_max_event_duration = max(duration_days),
            midcenDO_mean_event_mean_DO = mean(mean_DO),
            midcenDO_mean_event_intensity = mean(intensity),
            midcenDO_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg DO below threhsold per mpa
midcen_DO_mpa_summary2 <- midcen_DO_events %>%
  filter(is_DO_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(midcenDO_annual_days_belowthresh = n(),
            midcenDO_annual_avg_DO_belowthresh = mean(DO))
midcen_DO_mpa_summary3 <- midcen_DO_mpa_summary2 %>%
  group_by(File)%>%
  summarise(midcenDO_meanannual_days_belowthresh = mean(midcenDO_annual_days_belowthresh),
            midcenDO_meanannual_avg_DO_belowthresh = mean(midcenDO_annual_avg_DO_belowthresh)) %>%
  merge(midcen_DO_mpa_summary, by = "File") 

#endcen =====================================================================================

endcen_DO_events <- mpa_endcen %>% 
  mutate(is_DO_low = DO < 4.6,
         DO_event = label_events(is_DO_low)) 
endcen_DO_event_summary <- endcen_DO_events %>% 
  drop_na(DO_event) %>% 
  group_by(File, DO_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_DO = mean(DO),
            intensity = 4.6 - mean_DO,
            severity = intensity*duration_days,
            .groups = "drop")
endcen_DO_mpa_summary <- endcen_DO_event_summary %>%
  group_by(File) %>%
  summarise(endcenDO_num_event = n(),
            endcenDO_mean_event_duration = mean(duration_days),
            endcenDO_max_event_duration = max(duration_days),
            endcenDO_mean_event_mean_DO = mean(mean_DO),
            endcenDO_mean_event_intensity = mean(intensity),
            endcenDO_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg DO below threhsold per mpa
endcen_DO_mpa_summary2 <- endcen_DO_events %>%
  filter(is_DO_low == TRUE) %>%
  group_by(File, Year) %>%
  summarise(endcenDO_annual_days_belowthresh = n(),
            endcenDO_annual_avg_DO_belowthresh = mean(DO))
endcen_DO_mpa_summary3 <- endcen_DO_mpa_summary2 %>%
  group_by(File)%>%
  summarise(endcenDO_meanannual_days_belowthresh = mean(endcenDO_annual_days_belowthresh),
            endcenDO_meanannual_avg_DO_belowthresh = mean(endcenDO_annual_avg_DO_belowthresh)) %>%
  merge(endcen_DO_mpa_summary, by = "File") 


#merging DO event hist/midcen/endcen
DO_event <- full_join(historic_DO_mpa_summary3, midcen_DO_mpa_summary3) %>%
  full_join(endcen_DO_mpa_summary3)
```

## Anomalous temp analysis

Take climatological average for every day and climatological SD in a sliding 30 day window to figure out temperature deviations

```{r}
#historic ===================================================================================
#Historical climatology = mpa_historic_climatology. Append this to historic T dataset
mpa_historic_climatology_select <- mpa_historic_climatology %>%
  select(-pH_clim, -DO_clim) %>%
  merge(mpa_historic, by = c("File", "Month"))

historic_temp_events <- mpa_historic_climatology_select %>% 
  mutate(is_temp_high = Temp > (T_clim + 2*T_clim_sd),
         temp_event = label_events(is_temp_high)) 
historic_temp_event_summary <- historic_temp_events %>% 
  drop_na(temp_event) %>% 
  group_by(File, temp_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_temp = mean(Temp),
            intensity = Temp - (T_clim + 2*T_clim_sd),
            severity = intensity*duration_days,
            .groups = "drop")
historic_temp_mpa_summary <- historic_temp_event_summary %>%
  group_by(File) %>%
  summarise(histT_num_event = n(),
         histT_mean_event_duration = mean(duration_days),
         histT_max_event_duration = max(duration_days),
         histT_mean_event_mean_pH = mean(mean_temp),
         histT_mean_event_intensity = mean(intensity),
         histT_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg ph below threhsold per mpa
historic_temp_mpa_summary2 <- historic_temp_events %>%
  filter(is_temp_high == TRUE) %>%
  group_by(File, Year) %>%
  summarise(histT_annual_days_belowthresh = n(),
            histT_annual_avg_temp_belowthresh = mean(Temp))
historic_temp_mpa_summary3 <- historic_temp_mpa_summary2 %>%
  group_by(File)%>%
  summarise(histT_meanannual_days_belowthresh = mean(histT_annual_days_belowthresh),
            histT_meanannual_avg_T_belowthresh = mean(histT_annual_avg_temp_belowthresh)) %>%
  merge(historic_temp_mpa_summary, by = "File") 


#midcen ===================================================================================
#Historical climatology = mpa_historic_climatology. Append historical clim and SD to midcen T dataset
mpa_midcen_climatology_select <- mpa_historic_climatology %>%
  select(-pH_clim, -DO_clim) %>%
  merge(mpa_midcen, by = c("File", "Month"))

midcen_temp_events <- mpa_midcen_climatology_select %>% 
  mutate(is_temp_high = Temp > (T_clim + 2*T_clim_sd),
         temp_event = label_events(is_temp_high)) 
midcen_temp_event_summary <- midcen_temp_events %>% 
  drop_na(temp_event) %>% 
  group_by(File, temp_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_temp = mean(Temp),
            intensity = Temp - (T_clim + 2*T_clim_sd),
            severity = intensity*duration_days,
            .groups = "drop")
midcen_temp_mpa_summary <- midcen_temp_event_summary %>%
  group_by(File) %>%
  summarise(midcenT_num_event = n(),
         midcenT_mean_event_duration = mean(duration_days),
         midcenT_max_event_duration = max(duration_days),
         midcenT_mean_event_mean_pH = mean(mean_temp),
         midcenT_mean_event_intensity = mean(intensity),
         midcenT_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg ph below threhsold per mpa
midcen_temp_mpa_summary2 <- midcen_temp_events %>%
  filter(is_temp_high == TRUE) %>%
  group_by(File, Year) %>%
  summarise(midcenT_annual_days_belowthresh = n(),
            midcenT_annual_avg_temp_belowthresh = mean(Temp))
midcen_temp_mpa_summary3 <- midcen_temp_mpa_summary2 %>%
  group_by(File)%>%
  summarise(midcenT_meanannual_days_belowthresh = mean(midcenT_annual_days_belowthresh),
            midcenT_meanannual_avg_T_belowthresh = mean(midcenT_annual_avg_temp_belowthresh)) %>%
  merge(midcen_temp_mpa_summary, by = "File") 

#endcen ===================================================================================
#Historical climatology = mpa_historic_climatology. Append historical clim and SD to endcen T dataset
mpa_endcen_climatology_select <- mpa_historic_climatology %>%
  select(-pH_clim, -DO_clim) %>%
  merge(mpa_endcen, by = c("File", "Month"))

endcen_temp_events <- mpa_endcen_climatology_select %>% 
  mutate(is_temp_high = Temp > (T_clim + 2*T_clim_sd),
         temp_event = label_events(is_temp_high)) 
endcen_temp_event_summary <- endcen_temp_events %>% 
  drop_na(temp_event) %>% 
  group_by(File, temp_event) %>% 
  summarize(duration_days = n(),
            event_begin = min(Date),
            mean_temp = mean(Temp),
            intensity = Temp - (T_clim + 2*T_clim_sd),
            severity = intensity*duration_days,
            .groups = "drop")
endcen_temp_mpa_summary <- endcen_temp_event_summary %>%
  group_by(File) %>%
  summarise(endcenT_num_event = n(),
            endcenT_mean_event_duration = mean(duration_days),
            endcenT_max_event_duration = max(duration_days),
            endcenT_mean_event_mean_pH = mean(mean_temp),
            endcenT_mean_event_intensity = mean(intensity),
            endcenT_mean_event_severity = mean(severity)) %>% 
  merge(mpa_centroids, by = "File")
#total days below threshold + avg ph below threhsold per mpa
endcen_temp_mpa_summary2 <- endcen_temp_events %>%
  filter(is_temp_high == TRUE) %>%
  group_by(File, Year) %>%
  summarise(endcenT_annual_days_belowthresh = n(),
            endcenT_annual_avg_temp_belowthresh = mean(Temp))
endcen_temp_mpa_summary3 <- endcen_temp_mpa_summary2 %>%
  group_by(File)%>%
  summarise(endcenT_meanannual_days_belowthresh = mean(endcenT_annual_days_belowthresh),
            endcenT_meanannual_avg_T_belowthresh = mean(endcenT_annual_avg_temp_belowthresh)) %>%
  merge(endcen_temp_mpa_summary, by = "File") 

#merging temp event hist/midcen/endcen
temp_event <- full_join(historic_temp_mpa_summary3, midcen_temp_mpa_summary3) %>%
  full_join(endcen_temp_mpa_summary3)

```

```{r}
#intensity/severity/duration figs

historic_temp_events %>% 
  left_join(historic_temp_event_summary, by = c("File", "temp_event")) %>% 
  filter(NAME == "Ano Nuevo SMR") %>% 
  ggplot(aes(julianday, Year, fill = intensity)) +
  geom_tile() +
  scale_fill_distiller(palette = "YlOrRd", direction = 1, na.value = "skyblue") +
  theme_classic()

midcen_temp_events %>% 
  left_join(midcen_temp_event_summary, by = c("File", "temp_event")) %>% 
  filter(NAME == "Ano Nuevo SMR") %>% 
  ggplot(aes(julianday, Year, fill = intensity)) +
  geom_tile() +
  scale_fill_distiller(palette = "YlOrRd", direction = 1, na.value = "skyblue") +
  theme_classic()

endcen_temp_events %>% 
  left_join(endcen_temp_event_summary, by = c("File", "temp_event")) %>% 
  filter(NAME == "Ano Nuevo SMR") %>% 
  ggplot(aes(julianday, Year, fill = intensity)) +
  geom_tile() +
  scale_fill_distiller(palette = "YlOrRd", direction = 1, na.value = "skyblue") +
  theme_classic()
```

## Anom contd: regressions

Regressions of historical env var on x axis and mid/end cen on y axis, each point is an MPA. to visualize bright spots and hot spots. Need to figure out how to normalize data

```{r}
#first, for mean temp. historical vs. mid cen. next we can do historical vs. diff btwn historical and mid.

sum_diff_normalized <- sum_diff %>%
  mutate(historic_T_mean_norm = historic_T_mean/log(historic_T_mean),
         middiff_T_mean_norm = mid_diff_T_mean/log(mid_diff_T_mean))

#historic pH_mean vs. midcen pH_mean
ggplot(data = sum_diff, aes(x = historic_pH_mean, y = midcen_pH_mean)) +
  stat_poly_line() +
  stat_poly_eq(use_label(c("eq", "R2"))) +
  geom_point() +
  theme_classic() +
  labs(y= "Midcen pH_mean", x = "Historic pH_mean") +
  ggtitle("Historic vs. midcen pH_mean")

#historic pH_mean vs. midcen pH_mean
ggplot(data = sum_diff, aes(x = historic_pH_mean, y = midcen_pH_mean)) +
  stat_poly_line() +
  stat_poly_eq(use_label(c("eq", "R2"))) +
  geom_point() +
  theme_classic() +
  labs(y= "Midcen pH_mean", x = "Historic pH_mean") +
  ggtitle("Historic vs. midcen pH_mean")


```
